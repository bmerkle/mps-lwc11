#summary Implementation of Step 1, 0.1

= Task =

0.1 Simple (structural) DSL without any fancy expression language or such.

Build a simple data definition language to define entities with properties. Properties have a name and a type. It should be possible to use primitive types for properties, as well as other Entities.


= Details =

== Creating a Project, Language and Solution ==

To get started, we first create a new project using the File->New Project menu item. The name for the project is of course arbitrary, but we call it lwc11. When creating the project, the wizard prompts us to also create a language and a sandbox solution. We accept these proposals, and call the language _entities_, and the solution _lwc11demo_.  

The point of the solution created during projects set up is that this solution already has a _uses_ relationship with the language we create. In other words, you can directly create instances of the concepts defined in your _entities_ language in the solution.

The explorer should look something like the following after doing this.

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-afterCreatingProject.png


== Creating the first language concepts ==

In MPS what is typically called a metaclass is called a language concept, or _concept_ for short. Because MPS is a projectional editor, languages are actually defined by first defining the structure of the language concepts. 

Based on the task we are supposed to implement, it is obvious that we need a language concept called _Entity_. So let's create it. In the _structure_ part of your _entities_ language select New->concept from the context menu. Name your new concept _Entity_ and make sure it implements the _INamedConcept_ interface. This adds a _name_ property to our new concept. Using the predefined interface is better than just adding a string property _name_, because a couple of default MPS functionalities depend on the _INamedConcept_ interface. You should also define an alias for your concept, the alias is the text string that is used to instantiate a concept in the editor, we will illustrate this below. The next screenshot shows the result of this step.

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-creatingTheEntityConcept.png

In MPS, projects contrain languages and solutions. A solution is a container for non-language things. A solution and alanguage in turn consist of models. A model corresponds to a physical resource, basically an XML file. Each model contains any number of root notes, which are instances of concepts that half there _can Be Root_ property set to _true_. In our example, we want to make sure that a model can contain several entities, so we add an additional language concept that acts as a container for entities and is itself a rootable concept. We call this concept _EntityReource_. Please use the same approach as above to create this new concept.

As we just said, the EntityResource should contain any number of entities. To enable this, we must add a child relationship the entity resource. The following screenshot should be self explaining and shows the result. Notice how the _instance can be root_ property is set to _true_.

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-creatingTheEntityResourceConcept.png

At this point we are finished with the definition of the structure of our first two concepts. To make them usable in the editor we have to define the syntax, or in MPS terminology, the editor. Let's start with the entity.

== Defining an Editor == 

If you double-click on your Entity concept, the structure editor for Entity should open. You can then select editor tab. If you click into the blank editor, you can create a new concept editor. After you do this you should have an empty editor, into which you can add your projection rules. The result of adding the projection rules should look like the following (notice that our entities don't have attributes yet):

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-entityEditor1.png

Some explanations are in order. The 

{{{
[-

-]
}}}

syntax refers to so-called indent collections. These are collections that behave more or less like flowing text, I will explain details below. Within this collection refers have a keyword entity. Keywords are called constants in the MPS editor. So after selecting the indent collection from the code completion menu, you should then select _constant_ from the code completion menu. Once you have inserted the constant, you can specify the string value, "entity". 

The next element in the collection is the name of the entity. Insert a new empty cell into the indent collection (by pressing enter or insert), and then press control-space and enter an opening curly brace so you can select from the available primitive properties; that name property. This means that the cell projects the name of the entity (remember you get the name property by inheriting from the _INamedConcpet_ interface.) 

Now enter two additional constants for the opening and closing curly brace. At this point all the cells in the indent collection are shown in one line. If you want to force line breaks, for example, in front of the closing curly brace, you have to select the respective cell property as shown in the following screenshot. You can't open the inspector window by pressing Alt-2 or by selecting Window->Tool Windows->Inspector from the menu (you will need the inspector all the time, so keep it open).

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-entityEditor2.png

At this point we are finished defining the editor for the entity (at least for the time being), and we can now define the editor for the resource. Create a new empty editor for EntityResource in the same way as explained for the entity above. This editor should only contain the list of entities, the entity resource contains. The next screenshot shows the resulting editor.


https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-entityResourceEditor.png

The editor itself contains only one cell. It is a vertical child collection. So in the editor definition press control-space and select "child node cell list (vertical)" from the context menu. To complete the editor, you have to select a collection of children of the entity resource that should actually be projected in that list. Put the cursor into the red "no link" cell, and press control-space. You should be able to select the "entities" collection.

== Defining a simple model ==

This finishes the definition (at least the first iteration) of the language, and we can go to the previously created solution and create an example instance.

So in the solution, use the context menu to create a new model. Its name does not matter. Selecting the context menu of this new model, you should be able to create an instance of _EntityResource_, because it is a rootable concept. This should look like the following:

https://mps-lwc11.googlecode.com/svn/trunk/lwc11/wiki-images/lwc11step1At01-firstSolution.png

The syntax is relatively boring, because we didn't define any fancy syntax for the entity resource, it simply contains a collection of entities. The symbol you see represents this empty collection. You put the cursor into this field, you can either press enter or type "entity" (remember the alias) to create a new entity. Notice how the syntax of the newly created entity resembles the editor we defined above. You can now go ahead and enter a name for the new entity, for example "Person". 

Selecting the closing curly brace of the person entity, you can now press enter to add new entities. This completes the first iteration. We can now continue to add attributes for the entities.

== Adding Attributes to Entities ==