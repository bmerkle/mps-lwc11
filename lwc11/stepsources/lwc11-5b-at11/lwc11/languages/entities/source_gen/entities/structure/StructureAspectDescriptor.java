package entities.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"entities.structure.Entity", "entities.structure.EntityAttribute", "entities.structure.EntityResource", "entities.structure.EntityType", "entities.structure.IResourceContent", "entities.structure.IntType", "entities.structure.PrimitiveType", "entities.structure.StringType", "entities.structure.Type"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("entities.structure.Entity", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "entities.structure.IResourceContent"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("entities.structure.EntityAttribute", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("entities.structure.EntityResource", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("entities.structure.EntityType", "entities.structure.Type", false, new String[]{"entities.structure.Type"}, new String[]{}, new String[]{"entity"});
      case 4:
        return new CompiledConceptDescriptor("entities.structure.IResourceContent", null, true, new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("entities.structure.IntType", "entities.structure.PrimitiveType", false, new String[]{"entities.structure.PrimitiveType"}, new String[]{}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("entities.structure.PrimitiveType", "entities.structure.Type", false, new String[]{"entities.structure.Type"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("entities.structure.StringType", "entities.structure.Type", false, new String[]{"entities.structure.Type"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("entities.structure.Type", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
